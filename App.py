import streamlit as st
import pandas as pd
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, WebDriverException
import time
import io
import os
import sys
from datetime import datetime
import logging
import subprocess

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="UniProt 3D Structure Extractor",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="collapsed"
)

def install_chromium():
    """C√†i ƒë·∫∑t chromium n·∫øu ch∆∞a c√≥"""
    try:
        # Ki·ªÉm tra xem chromium ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
        result = subprocess.run(['which', 'chromium'], capture_output=True, text=True)
        if result.returncode == 0:
            logger.info(f"Chromium ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t t·∫°i: {result.stdout.strip()}")
            return result.stdout.strip()
        
        # Th·ª≠ c√°c ƒë∆∞·ªùng d·∫´n kh√°c
        possible_paths = [
            '/usr/bin/chromium',
            '/usr/bin/chromium-browser',
            '/usr/bin/google-chrome',
            '/usr/bin/google-chrome-stable'
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                logger.info(f"T√¨m th·∫•y browser t·∫°i: {path}")
                return path
        
        logger.warning("Kh√¥ng t√¨m th·∫•y chromium")
        return None
        
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra chromium: {e}")
        return None

def create_driver():
    """T·∫°o Chrome driver v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u"""
    # T√¨m chromium
    chromium_path = install_chromium()
    
    chrome_options = Options()
    
    # C·∫•u h√¨nh c∆° b·∫£n
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-software-rasterizer")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-plugins")
    chrome_options.add_argument("--disable-images")
    chrome_options.add_argument("--disable-javascript")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument("--single-process")
    chrome_options.add_argument("--no-zygote")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")
    chrome_options.add_argument("--disable-features=TranslateUI,VizDisplayCompositor")
    chrome_options.add_argument("--disable-ipc-flooding-protection")
    chrome_options.add_argument("--memory-pressure-off")
    chrome_options.add_argument("--max_old_space_size=4096")
    
    # User agent
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    # T·∫Øt automation detection
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # ƒê·∫∑t binary location n·∫øu t√¨m th·∫•y
    if chromium_path:
        chrome_options.binary_location = chromium_path
    
    try:
        # Th·ª≠ t·∫°o driver
        service = Service()
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        logger.info("T·∫°o driver th√†nh c√¥ng")
        return driver
        
    except Exception as e:
        logger.error(f"L·ªói t·∫°o driver: {e}")
        
        # Th·ª≠ v·ªõi webdriver-manager
        try:
            from webdriver_manager.chrome import ChromeDriverManager
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            logger.info("T·∫°o driver th√†nh c√¥ng v·ªõi webdriver-manager")
            return driver
        except Exception as e2:
            logger.error(f"L·ªói v·ªõi webdriver-manager: {e2}")
            return None

def test_driver():
    """Test driver functionality"""
    try:
        driver = create_driver()
        if driver:
            driver.get("https://www.google.com")
            title = driver.title
            driver.quit()
            logger.info(f"Driver test th√†nh c√¥ng: {title}")
            return True, f"Th√†nh c√¥ng: {title}"
        return False, "Kh√¥ng th·ªÉ t·∫°o driver"
    except Exception as e:
        logger.error(f"Driver test th·∫•t b·∫°i: {e}")
        return False, f"L·ªói: {str(e)}"

def get_entry_from_uniprot_selenium(gene_id, entry_name):
    """L·∫•y Entry ID t·ª´ UniProt"""
    url = f"https://www.uniprot.org/uniprotkb?query={gene_id}"
    
    driver = create_driver()
    if not driver:
        logger.error("Kh√¥ng th·ªÉ t·∫°o driver")
        return None
    
    try:
        logger.info(f"ƒêang truy c·∫≠p: {url}")
        driver.get(url)
        
        # Ch·ªù trang t·∫£i
        try:
            WebDriverWait(driver, 30).until(
                EC.presence_of_element_located((By.CLASS_NAME, "data-table"))
            )
        except TimeoutException:
            logger.warning(f"Timeout ch·ªù b·∫£ng t·∫£i cho {gene_id}")
            return None
        
        # Ch·∫•p nh·∫≠n cookie
        try:
            cookie_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'I agree, dismiss this banner')]"))
            )
            cookie_button.click()
            time.sleep(2)
        except TimeoutException:
            logger.info("Kh√¥ng c√≥ cookie banner")
        
        html_content = driver.page_source
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # T√¨m b·∫£ng
        table = soup.find('table', class_='data-table')
        if not table:
            table = soup.find('table')
        
        if not table:
            logger.warning(f"Kh√¥ng t√¨m th·∫•y b·∫£ng cho {gene_id}")
            return None
        
        tbody = table.find('tbody')
        if not tbody:
            logger.warning(f"Kh√¥ng t√¨m th·∫•y tbody cho {gene_id}")
            return None
        
        rows = tbody.find_all('tr')
        for row in rows:
            cols = row.find_all('td')
            if len(cols) > 3:
                current_entry_name = cols[3].text.strip()
                if current_entry_name == entry_name:
                    entry = cols[1].text.strip()
                    logger.info(f"T√¨m th·∫•y entry {entry} cho {gene_id}")
                    return entry
        
        logger.warning(f"Kh√¥ng t√¨m th·∫•y entry name '{entry_name}' cho {gene_id}")
        return None
        
    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω {gene_id}: {e}")
        return None
    finally:
        try:
            driver.quit()
        except:
            pass

def extract_3d_structure_table(final_url, query, entry_name):
    """L·∫•y th√¥ng tin t·ª´ b·∫£ng 3D structure"""
    driver = create_driver()
    if not driver:
        logger.error("Kh√¥ng th·ªÉ t·∫°o driver cho 3D structure")
        return None
    
    try:
        logger.info(f"ƒêang truy c·∫≠p 3D structure: {final_url}")
        driver.get(final_url)
        time.sleep(8)
        
        # Ch·∫•p nh·∫≠n cookie
        try:
            cookie_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'I agree, dismiss this banner')]"))
            )
            cookie_button.click()
            time.sleep(3)
        except TimeoutException:
            logger.info("Kh√¥ng c√≥ cookie banner")
        
        html_content = driver.page_source
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # T√¨m b·∫£ng 3D structure
        table = None
        tables = soup.find_all('table')
        
        structure_keywords = ['SOURCE', 'IDENTIFIER', 'METHOD', 'RESOLUTION', 'CHAIN', 'POSITIONS', 'LINKS']
        
        for t in tables:
            headers = []
            thead = t.find('thead')
            if thead:
                header_cells = thead.find_all(['th', 'td'])
                headers = [cell.get_text(strip=True).upper() for cell in header_cells]
            else:
                first_row = t.find('tr')
                if first_row:
                    header_cells = first_row.find_all(['th', 'td'])
                    headers = [cell.get_text(strip=True).upper() for cell in header_cells]
            
            matching_keywords = sum(1 for keyword in structure_keywords if keyword in ' '.join(headers))
            if matching_keywords >= 3:
                table = t
                break
        
        if not table:
            for t in tables:
                table_text = t.get_text().upper()
                if ('ALPHAFOLD' in table_text or 'PDB' in table_text or 'AF-' in table_text) and len(t.find_all('tr')) > 1:
                    table = t
                    break
        
        if not table:
            logger.warning(f"Kh√¥ng t√¨m th·∫•y b·∫£ng 3D structure cho {query}")
            return None
        
        # L·∫•y headers
        headers = []
        thead = table.find('thead')
        if thead:
            header_row = thead.find('tr')
            if header_row:
                for th in header_row.find_all(['th', 'td']):
                    header_text = th.get_text(strip=True)
                    if header_text:
                        headers.append(header_text)
        
        if not headers:
            first_row = table.find('tr')
            if first_row:
                header_cells = first_row.find_all(['th', 'td'])
                for cell in header_cells:
                    header_text = cell.get_text(strip=True)
                    if header_text:
                        headers.append(header_text)
        
        # L·∫•y d·ªØ li·ªáu
        data = []
        tbody = table.find('tbody')
        if tbody:
            rows = tbody.find_all('tr')
        else:
            all_rows = table.find_all('tr')
            if all_rows and headers:
                rows = all_rows[1:]
            else:
                rows = all_rows
        
        for row in rows:
            cells = row.find_all(['td', 'th'])
            row_data = []
            
            for cell in cells:
                cell_text = cell.get_text(strip=True)
                
                links = cell.find_all('a')
                if links:
                    link_urls = []
                    for link in links:
                        href = link.get('href', '')
                        if href:
                            if href.startswith('/'):
                                href = 'https://www.uniprot.org' + href
                            elif not href.startswith('http'):
                                href = 'https://www.uniprot.org/' + href
                            link_urls.append(href)
                    
                    if link_urls:
                        cell_text = f"{cell_text} | Links: {'; '.join(link_urls)}"
                
                row_data.append(cell_text)
            
            if row_data and any(cell.strip() for cell in row_data):
                while len(row_data) < len(headers):
                    row_data.append("")
                
                full_row = [query, entry_name] + row_data[:len(headers)]
                data.append(full_row)
        
        if data:
            full_headers = ['Query', 'Entry Name'] + headers
            logger.info(f"L·∫•y ƒë∆∞·ª£c {len(data)} d√≤ng d·ªØ li·ªáu cho {query}")
            return data, full_headers
        else:
            logger.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho {query}")
            return None
            
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu 3D structure cho {query}: {e}")
        return None
    finally:
        try:
            driver.quit()
        except:
            pass

def calculate_time_estimate(total_items, current_item, start_time):
    """T√≠nh to√°n th·ªùi gian ∆∞·ªõc t√≠nh"""
    if current_item == 0:
        return "ƒêang t√≠nh to√°n..."
    
    elapsed_time = time.time() - start_time
    avg_time_per_item = elapsed_time / current_item
    remaining_items = total_items - current_item
    estimated_remaining = remaining_items * avg_time_per_item
    
    minutes = int(estimated_remaining // 60)
    seconds = int(estimated_remaining % 60)
    
    if minutes > 0:
        return f"C√≤n kho·∫£ng {minutes} ph√∫t {seconds} gi√¢y"
    else:
        return f"C√≤n kho·∫£ng {seconds} gi√¢y"

def process_complete_workflow(df_input):
    """X·ª≠ l√Ω to√†n b·ªô workflow"""
    progress_container = st.container()
    
    with progress_container:
        st.markdown("### üîÑ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")
        
        overall_progress = st.progress(0)
        current_step = st.empty()
        step_progress = st.progress(0)
        status_text = st.empty()
        time_estimate = st.empty()
        
        stats_container = st.container()
        
        start_time = time.time()
        
        # B∆∞·ªõc 1: L·∫•y Entry IDs
        current_step.markdown("**üîç B∆∞·ªõc 1/2: L·∫•y Entry IDs t·ª´ UniProt**")
        
        results = []
        total_rows = len(df_input)
        success_count = 0
        
        for index, row in df_input.iterrows():
            query = str(row['Query']).strip()
            entry_name = str(row['Entry Name']).strip()
            
            current_progress = (index + 1) / total_rows
            step_progress.progress(current_progress)
            overall_progress.progress(current_progress * 0.4)
            
            status_text.text(f"ƒêang x·ª≠ l√Ω {index + 1}/{total_rows}: {query}")
            
            if index > 0:
                time_est = calculate_time_estimate(total_rows, index + 1, start_time)
                time_estimate.text(f"‚è±Ô∏è {time_est}")
            
            entry_id = get_entry_from_uniprot_selenium(query, entry_name)
            
            if entry_id:
                final_url = f"https://www.uniprot.org/uniprotkb/{entry_id}/entry#structure"
                status = "‚úÖ Th√†nh c√¥ng"
                success_count += 1
            else:
                final_url = ""
                status = "‚ùå Kh√¥ng t√¨m th·∫•y"
            
            results.append({
                'Query': query,
                'Entry Name': entry_name,
                'Entry ID': entry_id if entry_id else "",
                'Final URL': final_url,
                'Status': status
            })
            
            with stats_container:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("ƒê√£ x·ª≠ l√Ω", f"{index + 1}/{total_rows}")
                with col2:
                    st.metric("Th√†nh c√¥ng", success_count)
                with col3:
                    st.metric("Th·∫•t b·∫°i", (index + 1) - success_count)
                with col4:
                    success_rate = (success_count / (index + 1)) * 100
                    st.metric("T·ª∑ l·ªá th√†nh c√¥ng", f"{success_rate:.1f}%")
            
            time.sleep(3)
        
        step_progress.progress(1.0)
        overall_progress.progress(0.4)
        
        df_entry_results = pd.DataFrame(results)
        
        # B∆∞·ªõc 2: L·∫•y 3D Structure data
        current_step.markdown("**üß¨ B∆∞·ªõc 2/2: L·∫•y d·ªØ li·ªáu 3D Structure**")
        
        valid_results = df_entry_results[df_entry_results['Entry ID'] != ""]
        
        if len(valid_results) == 0:
            st.error("‚ùå Kh√¥ng c√≥ Entry ID n√†o h·ª£p l·ªá")
            return df_entry_results, None
        
        all_structure_data = []
        all_headers = None
        structure_count = 0
        
        step2_start_time = time.time()
        
        for idx, (index, row) in enumerate(valid_results.iterrows()):
            query = row['Query']
            entry_name = row['Entry Name']
            final_url = row['Final URL']
            
            current_progress = (idx + 1) / len(valid_results)
            step_progress.progress(current_progress)
            overall_progress.progress(0.4 + (current_progress * 0.6))
            
            status_text.text(f"ƒêang l·∫•y 3D structure {idx + 1}/{len(valid_results)}: {query}")
            
            if idx > 0:
                time_est = calculate_time_estimate(len(valid_results), idx + 1, step2_start_time)
                time_estimate.text(f"‚è±Ô∏è {time_est}")
            
            result = extract_3d_structure_table(final_url, query, entry_name)
            
            if result:
                data, headers = result
                if all_headers is None:
                    all_headers = headers
                all_structure_data.extend(data)
                structure_count += len(data)
            
            with stats_container:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Proteins ƒë√£ x·ª≠ l√Ω", f"{idx + 1}/{len(valid_results)}")
                with col2:
                    st.metric("Structures t√¨m th·∫•y", structure_count)
                with col3:
                    st.metric("Trung b√¨nh/protein", f"{structure_count/(idx+1):.1f}" if idx >= 0 else "0")
                with col4:
                    completion_rate = ((idx + 1) / len(valid_results)) * 100
                    st.metric("Ho√†n th√†nh", f"{completion_rate:.1f}%")
            
            time.sleep(4)
        
        overall_progress.progress(1.0)
        step_progress.progress(1.0)
        status_text.text("‚úÖ Ho√†n th√†nh t·∫•t c·∫£!")
        
        total_time = time.time() - start_time
        minutes = int(total_time // 60)
        seconds = int(total_time % 60)
        time_estimate.text(f"üéâ Ho√†n th√†nh trong {minutes} ph√∫t {seconds} gi√¢y!")
        
        if all_structure_data:
            df_final_results = pd.DataFrame(all_structure_data, columns=all_headers)
            return df_entry_results, df_final_results
        else:
            return df_entry_results, None

def main():
    """H√†m ch√≠nh"""
    st.markdown("# üß¨ UniProt 3D Structure Extractor")
    st.markdown("Tr√≠ch xu·∫•t th√¥ng tin c·∫•u tr√∫c 3D t·ª´ UniProt Database")
    
    # Test driver
    with st.expander("üîß Ki·ªÉm tra h·ªá th·ªëng", expanded=False):
        if st.button("üß™ Test Browser Driver"):
            with st.spinner("ƒêang test driver..."):
                success, message = test_driver()
                if success:
                    st.success(f"‚úÖ {message}")
                else:
                    st.error(f"‚ùå {message}")
    
    # Upload section
    st.markdown("### üìÅ Upload File Excel")
    st.markdown("File Excel c·∫ßn c√≥ **2 c·ªôt**: `Query` v√† `Entry Name`")
    
    uploaded_file = st.file_uploader(
        "Ch·ªçn file Excel",
        type=['xlsx', 'xls'],
        help="File Excel v·ªõi 2 c·ªôt: Query v√† Entry Name"
    )
    
    if uploaded_file is not None:
        try:
            df_input = pd.read_excel(uploaded_file)
            
            required_columns = ['Query', 'Entry Name']
            missing_columns = [col for col in required_columns if col not in df_input.columns]
            
            if missing_columns:
                st.error(f"‚ùå File thi·∫øu c·ªôt: {missing_columns}")
                st.error(f"C√°c c·ªôt hi·ªán t·∫°i: {list(df_input.columns)}")
                return
            
            st.success(f"‚úÖ File h·ª£p l·ªá - {len(df_input)} d√≤ng d·ªØ li·ªáu")
            
            estimated_time = len(df_input) * 12
            est_minutes = estimated_time // 60
            est_seconds = estimated_time % 60
            
            st.info(f"‚è±Ô∏è ∆Ø·ªõc t√≠nh th·ªùi gian x·ª≠ l√Ω: {est_minutes} ph√∫t {est_seconds} gi√¢y")
            
            with st.expander("üëÄ Xem tr∆∞·ªõc d·ªØ li·ªáu", expanded=True):
                st.dataframe(df_input.head(10), use_container_width=True)
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", type="primary", use_container_width=True):
                    
                    df_entry_results, df_final_results = process_complete_workflow(df_input)
                    
                    if df_entry_results is not None:
                        st.markdown("### üìä K·∫øt qu·∫£ Entry IDs")
                        
                        success_count = len(df_entry_results[df_entry_results['Entry ID'] != ""])
                        total_count = len(df_entry_results)
                        fail_count = total_count - success_count
                        
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("T·ªïng s·ªë", total_count)
                        with col2:
                            st.metric("Th√†nh c√¥ng", success_count)
                        with col3:
                            st.metric("Th·∫•t b·∫°i", fail_count)
                        with col4:
                            st.metric("T·ª∑ l·ªá th√†nh c√¥ng", f"{success_count/total_count*100:.1f}%")
                        
                        with st.expander("üìã Chi ti·∫øt Entry IDs", expanded=False):
                            st.dataframe(df_entry_results, use_container_width=True)
                        
                        if df_final_results is not None:
                            st.markdown("### üß¨ K·∫øt qu·∫£ 3D Structure")
                            
                            unique_proteins = df_final_results['Query'].nunique()
                            total_structures = len(df_final_results)
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("T·ªïng d√≤ng d·ªØ li·ªáu", total_structures)
                            with col2:
                                st.metric("S·ªë proteins", unique_proteins)
                            with col3:
                                st.metric("Trung b√¨nh/protein", f"{total_structures/unique_proteins:.1f}")
                            
                            with st.expander("üî¨ Chi ti·∫øt 3D Structure", expanded=True):
                                st.dataframe(df_final_results, use_container_width=True)
                            
                            st.markdown("### üíæ T·∫£i xu·ªëng k·∫øt qu·∫£")
                            
                            output = io.BytesIO()
                            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                                df_final_results.to_excel(writer, sheet_name='3D_Structures', index=False)
                                df_entry_results.to_excel(writer, sheet_name='Entry_IDs', index=False)
                            
                            output.seek(0)
                            
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            filename = f"UniProt_3D_Structures_{timestamp}.xlsx"
                            
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng k·∫øt qu·∫£ Excel",
                                data=output.getvalue(),
                                file_name=filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                use_container_width=True
                            )
                            
                        else:
                            st.warning("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu 3D structure n√†o")
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu")
        
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}")
    
    st.markdown("---")
    st.markdown("**üî¨ UniProt 3D Structure Extractor** - VƒÉn Qu√¢n B√πi")

if __name__ == "__main__":
    main()
